
if (NOT CMAKE_BUILD_TYPE MATCHES "Debug")
    message(FATAL_ERROR "Coverage only works on debug builds")
endif ()
find_program(GCOVR gcovr)
if (${GCOVR} STREQUAL GCOVR-NOTFOUND)
    message(FATAL_ERROR "unable to find gcovr: no coverage report is possible")
else ()
    # Get gcov version
    execute_process(COMMAND ${GCOVR} --version
            OUTPUT_VARIABLE GCOVR_VERSION)
    string(REPLACE "\n" ";" GCOVR_VERSION ${GCOVR_VERSION})
    list(SUBLIST GCOVR_VERSION 0 1 GCOVR_VERSION)
    string(REPLACE " " ";" GCOVR_VERSION ${GCOVR_VERSION})
    list(SUBLIST GCOVR_VERSION 1 1 GCOVR_VERSION)

    message(STATUS "Found gcovr version ${GCOVR_VERSION} at location: ${GCOVR} ")
    if (${GCOVR_VERSION} VERSION_LESS 5.1)
        message(FATAL_ERROR "gcovr: Too old version of gcovr, minimum required is 5.1")
    endif ()
endif ()
# options for coverage
if (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
    add_compile_options(--coverage)
    link_libraries(gcov)
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(--coverage)
    add_link_options(--coverage)
    get_filename_component(COMPILER_PATH ${CMAKE_CXX_COMPILER} DIRECTORY)
    set(${PRJPREFIX}_GCOV "${COMPILER_PATH}/llvm-cov gcov")
    if (WIN32)
        string(REPLACE "/" "\\\\" ${PRJPREFIX}_GCOV ${${PRJPREFIX}_GCOV})
    endif ()
else ()
    message(FATAL_ERROR "Unsupported Compiler '${CMAKE_CXX_COMPILER_ID}' for coverage")
endif ()
